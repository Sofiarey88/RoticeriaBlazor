@page "/productos"
@using RoticeriaBlazor.Interfaces
@using RoticeriaBlazor.Modelos
@using RoticeriaBlazor.Services
@inject IProductoService ProductoService
@inject NavigationManager NavigationManager

<PageTitle>Productos</PageTitle>

<ComponenteTitulo Titulo="Productos"/>

<p>Lista de productos disponibles en el sitio web.</p>

@if (productos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <NavLink class="nav-link" href="nuevoproducto">
        Nuevo Producto
    </NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productos)
            {
                <tr>
                    <td>@producto.Nombre</td>
                    <td>@producto.Descripcion</td>
                    <td>@producto.Precio.ToString("C")</td>
                    <td>
                        <NavLink class="nav-link" href=@($"editarproducto?id={producto.Id}")>
                            Editar
                        </NavLink>
                        <button title="Eliminar" class="btn btn-danger" @onclick="@(() => ConfirmarEliminar(producto))">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (productoAEliminar != null)
{
    <div class="alert alert-warning">
        <strong>Advertencia:</strong> ¿Está seguro que desea eliminar el producto @productoAEliminar.Nombre?
        <button class="btn btn-danger" @onclick="EliminarProducto">Sí, Eliminar</button>
        <button class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
    </div>
}

@code {
    private List<Producto>? productos;
    private Producto? productoAEliminar;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        try
        {
            productos = await ProductoService.Get();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching productos: {ex.Message}");
            productos = new List<Producto>(); // Mostrar lista vacía en caso de error
        }
    }

    private void ConfirmarEliminar(Producto producto)
    {
        productoAEliminar = producto; // Almacenar el producto a eliminar
    }

    private async Task EliminarProducto()
    {
        if (productoAEliminar != null)
        {
            try
            {
                await ProductoService.Delete(productoAEliminar.Id); // Elimina el producto
                await CargarProductos(); // Recarga la lista después de eliminar
                productoAEliminar = null; // Limpiar la selección
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar el producto: {ex.Message}");
                // Puedes agregar un mensaje de error aquí para notificar al usuario
            }
        }
    }

    private void CancelarEliminar()
    {
        productoAEliminar = null; // Cancelar la eliminación
    }
}
